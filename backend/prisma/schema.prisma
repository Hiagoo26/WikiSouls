generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id               Int          @id @default(autoincrement())
  nick             String       @unique @default("Usu√°rio")
  email            String       @unique
  senha            String
  avatar           String?      @default("https://i.imgur.com/default.png")
  bio              String?      @default("Sou um aventureiro em Lordran.")
  status           Status       @default(ONLINE)
  role             Role         @default(USER)
  criadoEm         DateTime     @default(now())
  amigosSeguidoPor Amizade[]    @relation("SeguidoPor")
  amigosSeguindo   Amizade[]    @relation("Seguindo")
  comentarios      Comentario[]
  likes            Like[]
  posts            Post[]
}

model Post {
  id           Int          @id @default(autoincrement())
  titulo       String?
  conteudo     String
  imagemUrl     String?
  criadoEm     DateTime     @default(now())
  atualizadoEm DateTime     @updatedAt
  autorId      Int
  comentarios  Comentario[] @relation("Comentarios")
  likes        Like[]       @relation("LikesPost")
  autor        Usuario      @relation(fields: [autorId], references: [id])
}

model Comentario {
  id           Int      @id @default(autoincrement())
  conteudo     String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  autorId      Int
  postId       Int
  autor        Usuario  @relation(fields: [autorId], references: [id])
  post         Post     @relation("Comentarios", fields: [postId], references: [id])
  likes        Like[]   @relation("LikesComentario")
}

model Like {
  id           Int         @id @default(autoincrement())
  usuarioId    Int
  postId       Int?
  comentarioId Int?
  criadoEm     DateTime    @default(now())
  comentario   Comentario? @relation("LikesComentario", fields: [comentarioId], references: [id])
  post         Post?       @relation("LikesPost", fields: [postId], references: [id])
  usuario      Usuario     @relation(fields: [usuarioId], references: [id])

  @@unique([usuarioId, postId, comentarioId])
}

model Amizade {
  id         Int      @id @default(autoincrement())
  seguidorId Int
  seguidoId  Int
  criadoEm   DateTime @default(now())
  seguido    Usuario  @relation("SeguidoPor", fields: [seguidoId], references: [id])
  seguidor   Usuario  @relation("Seguindo", fields: [seguidorId], references: [id])

  @@unique([seguidorId, seguidoId])
}

model SenhaReset {
  id Int @id @default(autoincrement())
  email String
  tokenHash String
  usado Boolean @default(false)
  criadoEm DateTime @default(now())
  expiaEm DateTime
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ONLINE
  OFFLINE
  AUSENTE
  INVISIVEL
}
